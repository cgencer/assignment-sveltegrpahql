{
  "resource_version": 8,
  "metadata": {
    "version": 3,
    "sources": [
      {
        "name": "default",
        "kind": "postgres",
        "tables": [
          {
            "table": {
              "name": "Contents",
              "schema": "public"
            }
          },
          {
            "table": {
              "name": "CrossBindings",
              "schema": "public"
            }
          },
          {
            "table": {
              "name": "Users",
              "schema": "public"
            }
          }
        ],
        "configuration": {
          "connection_info": {
            "database_url": {
              "from_env": "PG_DATABASE_URL"
            },
            "isolation_level": "read-committed",
            "use_prepared_statements": false
          }
        }
      }
    ],
    "query_collections": [
      {
        "name": "allowed-queries",
        "definition": {
          "queries": [
            {
              "name": "Introspection query",
              "query": "query IntrospectionQuery {\n        __schema {\n          queryType { name }\n          mutationType { name }\n          subscriptionType { name }\n          types {\n            ...FullType\n          }\n          directives {\n            name\n            description\n            locations\n            args {\n              ...InputValue\n            }\n          }\n        }\n      }\n\n      fragment FullType on __Type {\n        kind\n        name\n        description\n        fields(includeDeprecated: true) {\n          name\n          description\n          args {\n            ...InputValue\n          }\n          type {\n            ...TypeRef\n          }\n          isDeprecated\n          deprecationReason\n        }\n        inputFields {\n          ...InputValue\n        }\n        interfaces {\n          ...TypeRef\n        }\n        enumValues(includeDeprecated: true) {\n          name\n          description\n          isDeprecated\n          deprecationReason\n        }\n        possibleTypes {\n          ...TypeRef\n        }\n      }\n\n      fragment InputValue on __InputValue {\n        name\n        description\n        type { ...TypeRef }\n        defaultValue\n      }\n\n      fragment TypeRef on __Type {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }"
            }
          ]
        }
      },
      {
        "name": "set",
        "definition": {
          "queries": []
        }
      }
    ],
    "allowlist": [
      {
        "collection": "allowed-queries",
        "scope": {
          "global": true
        }
      },
      {
        "collection": "set",
        "scope": {
          "global": true
        }
      }
    ]
  }
}